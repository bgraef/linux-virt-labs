---
# Copyright (c) 2024 2025 Oracle and/or its affiliates.
# This software is made available to you under the terms of the Universal Permissive License (UPL), Version 1.0.
# The Universal Permissive License (UPL), Version 1.0 (see COPYING or https://oss.oracle.com/licenses/upl)
# See LICENSE.TXT for details.

- name: Gather facts and create instances
  hosts: localhost
  vars_files:
    - default_vars.yml
  vars:
    oci_config_section: DEFAULT
    ad_placement: 1
    compute_instances:
      1:
        instance_name: "olvm"
        type: "engine"
        instance_ocpus: 2
        instance_memory: 32
      2:
        instance_name: "olkvm01"
        type: "kvm"
        instance_ocpus: 16
        instance_memory: 128
    os: "Oracle Linux"
    os_version: "8"
    instance_shape: "VM.Standard.E4.Flex"
    private_key: "id_rsa"
    debug_enabled: false

  tasks:

    - name: Get location of oci_config
      ansible.builtin.set_fact:
        oci_config_file: "{{ lookup('env', 'HOME') + '/.oci/config' }}"

    - name: Get tenancy ocid
      ansible.builtin.set_fact:
        my_tenancy_id: "{{ lookup('ini', 'tenancy section={{ oci_config_section }} file={{ oci_config_file }}') }}"

    - name: Print tenacy id
      ansible.builtin.debug:
        msg: "{{ my_tenancy_id }}"
      when: debug_enabled

    - name: Get region id
      ansible.builtin.set_fact:
        my_region_id: "{{ lookup('ini', 'region section={{ oci_config_section }} file={{ oci_config_file }}') }}"

    - name: Print regions selected
      ansible.builtin.debug:
        msg: "{{ my_region_id }}"
      when: debug_enabled

    - name: Get list availbility domains
      oracle.oci.oci_identity_availability_domain_facts:
        config_file_location: "{{ coi_config_file | default(omit) }}"
        config_profile_name: "{{ oci_config_section | default(omit) }}"
        compartment_id: "{{ my_tenancy_id }}"
        region: "{{ my_region_id }}"
      register: result
      retries: 10
      delay: 30
      until: result is not failed

    - name: Print availability domains
      ansible.builtin.debug:
        msg: "{{ result }}"
      when: debug_enabled

    - name: Set list of availability domains
      ansible.builtin.set_fact:
        availability_domains: "{{ result.availability_domains }}"

    - name: Set to availability domain from list
      ansible.builtin.set_fact:
        my_availability_domain: "{{ availability_domains[(lookup('ansible.builtin.vars', 'ad_placement') | int) - 1].name }}"

    - name: Print availability domain ad_placement
      ansible.builtin.debug:
        msg: "{{ my_availability_domain }}"
      when: debug_enabled

    - name: Get compartment id from .oci/config or env OCI_COMPARTMENT_OCID
      vars:
        env_lookup: "{{ lookup('ansible.builtin.env', 'OCI_COMPARTMENT_OCID') }}"
        ini_lookup: "{{ lookup('ini', 'compartment-id section={{ oci_config_section }} file={{ oci_config_file }}') }}"
      ansible.builtin.set_fact:
        my_compartment_id: "{{ compartment_id | default(env_lookup, true | default(ini_lookup, true)) }}"

    - name: Create oci state file
      ansible.builtin.file:
        path: .ansible-state
        state: touch
        mode: "0755"

    - name: Add compartment id to state file
      ansible.builtin.lineinfile:
        path: .ansible-state
        line: "compartment_ocid: {{ my_compartment_id }}"
        mode: "0755"

    - name: Print compartment id
      ansible.builtin.debug:
        msg: "{{ my_compartment_id }}"
      when: debug_enabled

    - name: Fail when compartment_id is not defined
      ansible.builtin.fail:
        msg: "Variable for compartment_id is not defined."
      when: my_compartment_id is not defined

    - name: Generate random hex string
      vars:
        hex_chars: '0123456789abcdef'
      ansible.builtin.set_fact:
        vcn_code: "{{ query('community.general.random_string', upper=false, lower=false, override_special=hex_chars, numbers=false) }}"

    - name: Create a virtual cloud network
      oracle.oci.oci_network_vcn:
        compartment_id: "{{ my_compartment_id }}"
        display_name: "OLV-VCN"
        cidr_blocks: "10.0.0.0/16"
        dns_label: "olv"
      register: result
      retries: 10
      delay: 30
      until: result is not failed

    - name: Set vcn id
      ansible.builtin.set_fact:
        my_vcn_id: "{{ result.vcn.id }}"

    - name: Add vcn id to state file
      ansible.builtin.lineinfile:
        path: .ansible-state
        line: "vcn_ocid: {{ my_vcn_id }}"
        mode: "0755"

    - name: Create internet gateway
      oracle.oci.oci_network_internet_gateway:
        compartment_id: "{{ my_compartment_id }}"
        vcn_id: "{{ my_vcn_id }}"
        is_enabled: true
        display_name: "Internet Gateway-OLV-VCN"
        state: 'present'
      register: result
      retries: 10
      delay: 30
      until: result is not failed

    - name: Set internet gateway id
      ansible.builtin.set_fact:
        my_internet_gateway_id: "{{ result.internet_gateway.id }}"

    - name: Add internet_gateway id to state file
      ansible.builtin.lineinfile:
        path: .ansible-state
        line: "internet_gateway_ocid: {{ my_internet_gateway_id }}"
        mode: "0755"

    - name: Get list of services
      oracle.oci.oci_network_service_facts:
      register: result
      retries: 10
      delay: 30
      until: result is not failed

    - name: Print list of services
      ansible.builtin.debug:
        msg: "{{ result }}"
      when: debug_enabled

    - name: Set service id
      ansible.builtin.set_fact:
        my_service_id: "{{ result.services[0].id }}"

    - name: Add service id to state file
      ansible.builtin.lineinfile:
        path: .ansible-state
        line: "service_ocid: {{ my_service_id }}"
        mode: "0755"

    - name: Set service cidr cidr_block
      ansible.builtin.set_fact:
        my_service_cidr_block: "{{ result.services[0].cidr_block }}"

    - name: Create service gateway
      oracle.oci.oci_network_service_gateway:
        compartment_id: "{{ my_compartment_id }}"
        services:
          - service_id: "{{ my_service_id }}"
        vcn_id: "{{ my_vcn_id }}"
        display_name: "Service Gateway-OLV-VCN"
        state: 'present'
      register: result
      retries: 10
      delay: 30
      until: result is not failed

    - name: Set service gateway id
      ansible.builtin.set_fact:
        my_service_gateway_id: "{{ result.service_gateway.id }}"

    - name: Add service gateway id to state file
      ansible.builtin.lineinfile:
        path: .ansible-state
        line: "service_gateway_ocid: {{ my_service_gateway_id }}"
        mode: "0755"

    - name: Create route table for public subnet
      oracle.oci.oci_network_route_table:
        compartment_id: "{{ my_compartment_id }}"
        vcn_id: "{{ my_vcn_id }}"
        display_name: "Default Route Table for OLV-VCN"
        route_rules:
          -
            network_entity_id: "{{ my_internet_gateway_id }}"
            destination: "0.0.0.0/0"
            destination_type: CIDR_BLOCK
        state: 'present'
      register: result
      retries: 10
      delay: 30
      until: result is not failed

    - name: Set private subnet route table id
      ansible.builtin.set_fact:
        my_public_rt_id: "{{ result.route_table.id }}"

    - name: Add public route table id to state file
      ansible.builtin.lineinfile:
        path: .ansible-state
        line: "public_route_table_ocid: {{ my_public_rt_id }}"
        mode: "0755"

    - name: Create route table for private subnet
      oracle.oci.oci_network_route_table:
        compartment_id: "{{ my_compartment_id }}"
        vcn_id: "{{ my_vcn_id }}"
        display_name: "Route Table for Private Subnet-OLV-VCN"
        route_rules:
          -
            network_entity_id: "{{ my_service_gateway_id }}"
            destination: "{{ my_service_cidr_block }}"
            destination_type: SERVICE_CIDR_BLOCK
        state: 'present'
      register: result
      retries: 10
      delay: 30
      until: result is not failed

    - name: Set private subnet route table id
      ansible.builtin.set_fact:
        my_private_rt_id: "{{ result.route_table.id }}"

    - name: Add private route table id to state file
      ansible.builtin.lineinfile:
        path: .ansible-state
        line: "private_route_table_ocid: {{ my_private_rt_id }}"
        mode: "0755"

    - name: Create ingress rules yaml list
      ansible.builtin.template:
        src: ingress_security_rules.j2
        dest: /tmp/instance_ingress_security_rules.yaml
        mode: "0664"

    - name: Create egress rules yaml list
      ansible.builtin.template:
        src: egress_security_rules.j2
        dest: /tmp/instance_egress_security_rules.yaml
        mode: "0664"

    - name: Load the variables defined in the ingress rules yaml list
      ansible.builtin.include_vars:
        file: /tmp/instance_ingress_security_rules.yaml
        name: loaded_ingress

    - name: Print loaded_ingress
      ansible.builtin.debug:
        msg: "loaded ingress is {{ loaded_ingress }}"
      when: debug_enabled

    - name: Load the variables defined in the egress rules yaml list
      ansible.builtin.include_vars:
        file: /tmp/instance_egress_security_rules.yaml
        name: loaded_egress

    - name: Print loaded_egress
      ansible.builtin.debug:
        msg: "loaded egress is {{ loaded_egress }}"
      when: debug_enabled

    - name: Create security_list
      oracle.oci.oci_network_security_list:
        display_name: "Default Security List for OLV-VCN"
        compartment_id: "{{ my_compartment_id }}"
        vcn_id: "{{ my_vcn_id }}"
        ingress_security_rules: "{{ loaded_ingress.instance_ingress_security_rules }}"
        egress_security_rules: "{{ loaded_egress.instance_egress_security_rules }}"
      register: result
      retries: 10
      delay: 30
      until: result is not failed

    - name: Set security list id
      ansible.builtin.set_fact:
        my_security_list_id: "{{ result.security_list.id }}"

    - name: Add security list id to state file
      ansible.builtin.lineinfile:
        path: .ansible-state
        line: "security_list_ocid: {{ my_security_list_id }}"
        mode: "0755"

    - name: Create public subnet
      oracle.oci.oci_network_subnet:
        compartment_id: "{{ my_compartment_id }}"
        vcn_id: "{{ my_vcn_id }}"
        cidr_block: "{{ subnet1_cidr_block }}"
        display_name: "Public Subnet-OLV-VCN"
        prohibit_public_ip_on_vnic: false
        route_table_id: "{{ my_public_rt_id }}"
        security_list_ids: "{{ my_security_list_id }}"
        dns_label: "pub"
      register: result
      retries: 10
      delay: 30
      until: result is not failed

    - name: Set public subnet id
      ansible.builtin.set_fact:
        my_subnet1_id: "{{ result.subnet.id }}"

    - name: Add public subnet id to state file
      ansible.builtin.lineinfile:
        path: .ansible-state
        line: "public_subnet_ocid: {{ my_subnet1_id }}"
        mode: "0755"

    - name: Set public subnet domain_name
      ansible.builtin.set_fact:
        my_subnet1_domain_name: "{{ result.subnet.subnet_domain_name }}"

    - name: Create private subnet
      oracle.oci.oci_network_subnet:
        compartment_id: "{{ my_compartment_id }}"
        vcn_id: "{{ my_vcn_id }}"
        cidr_block: "{{ subnet2_cidr_block }}"
        display_name: "Private Subnet-OLV-VCN"
        prohibit_public_ip_on_vnic: true
        route_table_id: "{{ my_private_rt_id }}"
        security_list_ids: "{{ my_security_list_id }}"
        dns_label: "priv"
      register: result
      retries: 10
      delay: 30
      until: result is not failed

    - name: Set private subnet id
      ansible.builtin.set_fact:
        my_subnet2_id: "{{ result.subnet.id }}"

    - name: Add private subnet id to state file
      ansible.builtin.lineinfile:
        path: .ansible-state
        line: "private_subnet_ocid: {{ my_subnet2_id }}"
        mode: "0755"

    - name: Set private subnet domain_name
      ansible.builtin.set_fact:
        my_subnet2_domain_name: "{{ result.subnet.subnet_domain_name }}"

    - name: Set vlan
      ansible.builtin.include_tasks: "create_vlan.yml"

    - name: Set oci vars file
      ansible.builtin.template:
        src: oci_vars.j2
        dest: oci_vars.yml
        mode: "0664"

    - name: Get image
      oracle.oci.oci_compute_image_facts:
        compartment_id: "{{ my_compartment_id }}"
        operating_system: "{{ os }}"
        operating_system_version: "{{ os_version }}"
        shape: "{{ instance_shape }}"
        sort_by: TIMECREATED
        sort_order: DESC
      register: result
      retries: 10
      delay: 30
      until: result is not failed

    - name: Print image list
      ansible.builtin.debug:
        var: result
      when: debug_enabled

    - name: Set compute image id
      ansible.builtin.set_fact:
        ol_image_id: "{{ result.images[0].id }}"

    - name: Build an instance
      ansible.builtin.include_tasks: "build.yml"
      loop: "{{ lookup('dict', compute_instances, wantlist=True) }}"
      loop_control:
        extended: true

- name: Check if instances are available
  ansible.builtin.import_playbook: "check_instance_available.yml"

- name: Configure secondary network on each instance
  ansible.builtin.import_playbook: "configure_secondary_nic.yml"

- name: Setup and configure instance basics
  ansible.builtin.import_playbook: "provision_instance_basics.yml"

- name: Configure passwordless SSH
  ansible.builtin.import_playbook: "configure_passwordless_ssh.yml"

- name: Create hosts file for secondary nic dns
  ansible.builtin.import_playbook: "create_hostfile_secondary_nic.yml"
  when: use_secondary_hostfile

- name: Provision VNC on OLVM engine
  ansible.builtin.import_playbook: "provision_vnc.yml"
  when: use_vnc_on_engine

- name: Install OLVM engine
  ansible.builtin.import_playbook: "provision_olvm_engine.yml"
  when: install_engine

- name: Copy OLVM engine public key to kvm host
  ansible.builtin.import_playbook: "provision_olvm_engine_publickey.yml"
  when: copy_engine_publickey

- name: Add kvm hosts
  ansible.builtin.import_playbook: "ovirt_add_hosts.yml"
  when: config_olvm

- name: Check availability of kvm hosts
  ansible.builtin.import_playbook: "ovirt_check_hosts.yml"
  when: config_olvm

- name: Add and assign logical network
  ansible.builtin.import_playbook: "ovirt_add_logical_network.yml"
  when: config_olvm

- name: Add storage domains
  ansible.builtin.import_playbook: "ovirt_add_storage_domain.yml"
  when: config_olvm

- name: Add OL OVA template
  ansible.builtin.import_playbook: "ovirt_import_template.yml"
  when: config_olvm

- name: Create VM from OVA template
  ansible.builtin.import_playbook: "ovirt_create_vm_from_template.yml"
  when: config_olvm

- name: Print instances
  hosts: engine:kvm
  become: true
  gather_facts: false

  tasks:

    - name: Print instance details
      ansible.builtin.debug:
        msg:
          - "Instance details:"
          - "  name: {{ hostvars[inventory_hostname]['ansible_hostname'] }}"
          - "  public ip: {{ hostvars[inventory_hostname]['ansible_host'] }}"
          - "  private ip: {{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}"

    - name: Pause play to interact with the servers
      ansible.builtin.pause:
        prompt: |
          Playbook paused... hit <enter> to continue or <ctrl-c> then <a> to abort.
          Aborting at this stage requires manual removal of all cloud resources this playbook creates.

- name: Terminate instances and delete OCI resources
  ansible.builtin.import_playbook: "terminate_instance.yml"
