---
# Copyright (c) 2024 Oracle and/or its affiliates.
# This software is made available to you under the terms of the Universal Permissive License (UPL), Version 1.0.
# The Universal Permissive License (UPL), Version 1.0 (see COPYING or https://oss.oracle.com/licenses/upl)
# See LICENSE.TXT for details.

- name: Launch an instance using PV BV
  when: volume_type != "iscsi"
  block:
    - name: Launch an instance
      oracle.oci.oci_compute_instance:
        availability_domain: "{{ my_availability_domain }}"
        compartment_id: "{{ my_compartment_id }}"
        name: "{{ item.value.instance_name | default('instance-'~timestamp) }}"
        source_details:
          image_id: "{{ ol_image_id }}"
          source_type: image
          boot_volume_size_in_gbs: "{{ item.value.boot_volume_size_in_gbs | default(50) | int }}"
        shape: "{{ instance_shape }}"
        shape_config:
          ocpus: "{{ instance_ocpus }}"
          memory_in_gbs: "{{ instance_memory }}"
        create_vnic_details:
          assign_public_ip: true
          hostname_label: "{{ item.value.instance_name | default('instance-'~timestamp) }}"
          subnet_id: "{{ my_subnet_id }}"
        metadata:
          ssh_authorized_keys: "{{ lookup('file', lookup('env', 'HOME') + '/.ssh/' + private_key + '.pub') }}"
        agent_config:
          is_monitoring_disabled: false
          is_management_disabled: false
          are_all_plugins_disabled: false
          plugins_config:
            -
              name: "OS Management Service Agent"
              desired_state: DISABLED
        key_by: [compartment_id, availability_domain, display_name]
      register: result
      vars:
        timestamp: "{{ now().strftime('%Y%m%d-%H%M%S') }}"
      retries: 10
      delay: 30
      until: result is not failed

    - name: Print instance details
      ansible.builtin.debug:
        msg:
          - "Launched a new instance:"
          - "{{ result }}"
      when: debug_enabled

    - name: Set the compute instance id
      ansible.builtin.set_fact:
        instance_id: "{{ result.instance.id }}"

    - name: Set the compute instance display_name
      ansible.builtin.set_fact:
        instance_display_name: "{{ result.instance.display_name }}"

- name: Launch an instance using iSCSI BV
  when: volume_type == "iscsi"
  block:
    - name: Launch an instance
      oracle.oci.oci_compute_instance:
        availability_domain: "{{ my_availability_domain }}"
        compartment_id: "{{ my_compartment_id }}"
        name: "{{ item.value.instance_name | default('instance-'~timestamp) }}"
        source_details:
          image_id: "{{ ol_image_id }}"
          source_type: image
          boot_volume_size_in_gbs: "{{ item.value.boot_volume_size_in_gbs | default(50) | int }}"
        shape: "{{ instance_shape }}"
        shape_config:
          ocpus: "{{ instance_ocpus }}"
          memory_in_gbs: "{{ instance_memory }}"
        create_vnic_details:
          assign_public_ip: true
          hostname_label: "{{ item.value.instance_name | default('instance-'~timestamp) }}"
          subnet_id: "{{ my_subnet_id }}"
        metadata:
          ssh_authorized_keys: "{{ lookup('file', lookup('env', 'HOME') + '/.ssh/' + private_key + '.pub') }}"
        agent_config:
          is_monitoring_disabled: false
          is_management_disabled: false
          are_all_plugins_disabled: false
          plugins_config:
            - name: "OS Management Service Agent"
              desired_state: DISABLED
            - name: "Block Volume Management"
              desired_state: ENABLED
        key_by: [compartment_id, availability_domain, display_name]
      register: result
      vars:
        timestamp: "{{ now().strftime('%Y%m%d-%H%M%S') }}"
      retries: 10
      delay: 30
      until: result is not failed

    - name: Print instance details
      ansible.builtin.debug:
        msg:
          - "Launched a new instance:"
          - "{{ result }}"
      when: debug_enabled

    - name: Set the compute instance id
      ansible.builtin.set_fact:
        instance_id: "{{ result.instance.id }}"

    - name: Set the compute instance display_name
      ansible.builtin.set_fact:
        instance_display_name: "{{ result.instance.display_name }}"

- name: Get the vnic attachment details of instance
  oracle.oci.oci_compute_vnic_attachment_facts:
    compartment_id: "{{ my_compartment_id }}"
    instance_id: "{{ instance_id }}"
  register: result
  retries: 10
  delay: 30
  until: result is not failed

- name: Get vnic details
  oracle.oci.oci_network_vnic_facts:
    id: "{{ result.vnic_attachments[0].vnic_id }}"
  register: result
  retries: 10
  delay: 30
  until: result is not failed

- name: Set the instance private ip address
  ansible.builtin.set_fact:
    instance_private_ip: "{{ result.vnic.private_ip }}"

- name: Set the instance public ip address
  ansible.builtin.set_fact:
    instance_public_ip: "{{ result.vnic.public_ip }}"

- name: Add block storage to an instance
  ansible.builtin.include_tasks: "block.yml"
  loop: "{{ query('sequence', 'start=1 end=' + (block_count) | string) }}"
  loop_control:
    loop_var: blk_devices
    extended: true
  vars:
    block_devices:
      - b
      - c
      - d
      - e
      - f
      - g
      - h
      - i

- name: Add host level block volume
  when: item.value.add_bv | default('false') | bool
  block:
    - name: Create block volume
      oracle.oci.oci_blockstorage_volume:
        compartment_id: "{{ my_compartment_id }}"
        availability_domain: "{{ my_availability_domain }}"
        display_name: "bv-ocfs2"
        size_in_gbs: "{{ block_volume_size_in_gbs }}"
        key_by: [compartment_id, display_name]
      register: create_bv
      retries: 10
      delay: 30
      until: create_bv is not failed

    - name: Set the block volume id
      ansible.builtin.set_fact:
        volume_id: "{{ create_bv.volume.id }}"

    - name: Attach the block volume
      oracle.oci.oci_compute_volume_attachment:
        instance_id: "{{ instance_id }}"
        type: "{{ volume_type }}"
        volume_id: "{{ volume_id }}"
        compartment_id: "{{ my_compartment_id }}"
        device: "/dev/oracleoci/oraclevdo"
        display_name: "blockvolume-vdo"
        is_agent_auto_iscsi_login_enabled: true
        is_read_only: false
        is_shareable: true
      register: attach_bv
      retries: 10
      delay: 30
      until: attach_bv is not failed


- name: Print the public and private ip of the newly created instance
  ansible.builtin.debug:
    msg:
      - "Instance name: {{ instance_display_name }}"
      - "  public ip: {{ instance_public_ip }}"
      - "  private ip: {{ instance_private_ip }}"
  when: debug_enabled

- name: Print SSH proxy command
  ansible.builtin.debug:
    msg: "SSH Proxy: {{ ssh_proxy_cmd | default('') }}"
  when: debug_enabled

- name: Add host to in-memory host file
  ansible.builtin.add_host:
    name: "{{ instance_display_name }}"
    groups: "{{ item.value.type }}"
    ansible_user: opc
    ansible_private_key_file: "{{ lookup('env', 'HOME') + '/.ssh/' + private_key }}"
    ansible_ssh_common_args: "-o StrictHostKeyChecking=no {{ ssh_proxy_cmd | default('') }}"
    ansible_host: "{{ instance_public_ip }}"
    ansible_port: 22
    instance_ocid: "{{ my_instance_id }}"

- name: Create host ini file
  ansible.builtin.lineinfile:
    path: hosts
    regexp: '^\[{{ host_group }}'
    line: "[{{ host_group }}]"
    create: true
    mode: "0664"
  delegate_to: localhost
  loop:
    - engine
    - kvm
  loop_control:
    loop_var: host_group

- name: Add host to ini host file
  ansible.builtin.lineinfile:
    path: hosts
    regexp: '^{{ instance_name }}'
    line: >-
      {{ instance_name }}
      ansible_host={{ instance_ansible_host }}
      ansible_user={{ instance_ansible_user }}
      ansible_private_key_file={{ instance_ansible_private_key_file }}
      ansible_ssh_common_args={{ instance_ansible_ssh_common_args | quote }}
    insertafter: '^\[{{ item.value.type }}\]$'
    create: true